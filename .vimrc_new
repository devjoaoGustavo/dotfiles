" To work cool, disable compatibility with Vi
set nocompatible

filetype off

" Keep Plug commands between vundle#begin/end.
call plug#begin('~/.vim/plugged')
Plug 'VundleVim/Vundle.vim'
Plug 'kien/ctrlp.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'godlygeek/tabular'
Plug 'w0rp/ale'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-vinegar'
Plug 'wakatime/vim-wakatime'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-commentary'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'ngmy/vim-rubocop'
Plug '2072/PHP-Indenting-for-VIm'
Plug 'elixir-editors/vim-elixir', { 'for': ['elixir', 'eelixir'] }
Plug 'slashmili/alchemist.vim',   { 'for': ['elixir', 'eelixir'] }
Plug 'mhinz/vim-mix-format'
Plug 'pangloss/vim-javascript'
Plug 'tmhedberg/matchit'
Plug 'jiangmiao/auto-pairs'
call plug#end()

filetype plugin indent on
syntax on

set termguicolors

set background=dark " Set to dark for a dark variant
colorscheme grb24bit

" Space as leader
let mapleader = " "

" Move the cursor to the matched string
set incsearch
set hlsearch
" Search ignore case
set ignorecase
set smartcase

nnoremap <leader><leader> <c-^>

function! GitBranch()
  return system("echo \"($(git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'))\" | tr -d '\n'")
endfunction

" set statusline=%<%f\ %h%m%r\ %y%{GitBranch()}%=%-14.(%l,%c%V%)
set statusline=%<%f\ (%{&ft})\ %{GitBranch()}\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" Don't syntax highlight markdown because it's often wrong
autocmd! FileType mkd setlocal syn=off
" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

set cursorline

set showcmd
set ruler
set guicursor=

if has('nvim')
  set clipboard=unnamedplus
endif

set autoindent
set copyindent

set laststatus=2

" Search do not wrap around
set nowrap

" Avoid lags
set lazyredraw

" Display relative numbers on the other lines
set relativenumber

" Preserve buffer unwritten when editing other ones. Warning is thrown when
" try to exit
set hidden
set splitbelow
set splitright
set showmode

set belloff=all

set textwidth=80
set colorcolumn=+1
hi ColorColumn guibg=#222722

" Reduce the need for % in matching
set showmatch
set matchtime=1

set cmdheight=1

set shell=bash

set t_ti= t_te=
set backspace=indent,eol,start

set wildmode=longest,list
set wildmenu
" Fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100

set modeline
set modelines=3

set foldmethod=manual
set nofoldenable

" Tab characters entered will be changed to spaces
set expandtab

" Number of space characters inserted for indentation
set shiftwidth=2
set softtabstop=2
set shiftround

" Avoid creation of * .ext files
set nowritebackup
set nobackup
set noswapfile

set nojoinspaces
" Automatically read changes
set autoread

set signcolumn=no

" Increase history
set history=5

set list
set listchars=tab:›\ ,trail:⋅,precedes:«

" Hitting K in a Ruby file opens rdoc, which completely breaks the terminal
" to the point of having to kill vim and do `reset`. Unmap it entirely.
nnoremap K <Nop>

nmap <Up> :echo "Use k"<cr>
nmap <Down> :echo "Use j"<cr>
nmap <Left> :echo "Use h"<cr>
nmap <Right> :echo "Use l"<cr>

nnoremap <leader>o :only<cr>

" in order to ctrlp keep the root directory set up
if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = 'rg --files %s'
let g:ctrlp_match_window = 'bottom,order:ttb,min:5,max:15'
let g:ctrlp_switch_buffer = 'et'

set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=999

" Window buffer navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <leader>y "+y

" relative path
nnoremap <leader>cf :let @+ = expand("%")<cr>
" full path
nnoremap <leader>cF :let @+ = expand("%:p")<cr>
" just filename
nnoremap <leader>ct :let @+ = expand("%:t")<cr>

" resize windows
map <leader>, <C-w><
map <leader>. <C-w>>
map <leader>- <C-w>-
map <leader>= <C-w>+

" Multi cursors mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Thing for tabular
if exists(":Tabularize")
  nmap <Leader>a= :'<,'>Tabularize /=<CR>
  vmap <Leader>a= :'<,'>Tabularize /=<CR>
  nmap <Leader>a: :'<,'>Tabularize /:\zs<CR>
  vmap <Leader>a: :'<,'>Tabularize /:\zs<CR>
  nmap <Leader>a, :'<,'>Tabularize /,\zs<CR>
  vmap <Leader>a, :'<,'>Tabularize /,\zs<CR>
endif

" Fast saving
nmap <Esc><Esc> :w<cr>

" Quit like spacemacs
nmap <leader>wd :q<cr>

nmap <leader>vv :vs<cr>
nmap <leader>ss :sp<cr>

" new buffers
nmap <leader>vn :vnew<cr>
nmap <leader>sn :new<cr>

" Clean search
nmap <leader>hl :nohlsearch<CR>

" Go to next tab
nnoremap <Tab> :tabn<cr>

" Go to previous tab
nnoremap <S-Tab> :tabp<cr>

" Edit the current window in a new tab
nmap <leader>te :tabedit %<cr>

" Close the current tab
nmap <leader>tc :tabclose<cr>

" Open a new empty buffer
nmap <leader>N :enew<cr>

" Open a new tab
nmap <leader>tn :tabnew<cr>

" Move to the next buffer
nmap <leader>bn :bnext<CR>

" Move to the previous buffer
nmap <leader>bp :bprevious<CR>

" Close the current buffer and move to the previous one
nmap <leader>bq :bp <BAR> bd #<CR>

" list buffers
nmap <leader>bb :ls<cr>

" go to buffer
nmap <leader>bf :buffer<space>

" Open the Explore in the current buffer
nmap <leader>we :Explore<cr>
nmap <leader>ve :Vexplore<cr>
nmap <leader>ee :Texplore<cr>

" Rgrep
set grepprg=rg
nnoremap <leader>ff :Rg<Space>

" Remove all trailing whitespaces at save
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" Ignore some files and directories
set wildignore=
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store,*/vendor,*/deps/*,*/cover/*
set wildignore+=**/*.jpg,*.jpeg,*.gif,**/*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=**/node_modules,**/bower_components,**/tmp,**/vendor,**/git

" Rubocop config
nmap <Leader>rr :RuboCop %<CR>
let g:vimrubocop_keymap = 0
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'

" run credo in the current buffer
nmap <leader>cc :Mix credo %<cr>
nmap <leader>mf :Mix format %<cr>
nmap <leader>ed :ExDoc<cr>

" Edit this vimrc file
nmap <leader>fed :e ~/.vimrc<cr>
nmap <leader>fer :so ~/.vimrc<cr>

let g:PHP_noArrowMatching = 1
autocmd FileType php setlocal shiftwidth=4 softtabstop=4
autocmd FileType json setlocal shiftwidth=4 softtabstop=4
